Question 1.

a. A list of all the subjects' histories (string) i.e. index 0 has subject 0's history, index 1 has subject 1's history, and so on. 



b. A set of strings with the names of all students that earned an A grade in CSCI 103.

	

c. A map which has a student name key (string) that maps to a Student object containing all of the student's info (i.e. id # (unsigned int), (int) year, classes the student is currently taking (string), etc.) 

	

d. A map which has a grade key (string if letter grade, double if GPA or %) that maps to a set of students (could be student objects, strings if only the student name, or unsigned ints if only student ids).



Question 2.

The code returns the Linked List 5, 4, 3, 2, 1. funcA  iterates through the original Linked List, breaking when reaching the last node, node 5. It then calls on funcB, which goes through the nodes and recursively changes the every node's next to the number 1 less than it i.e. node 4's next points to node 3, node 3's next points to node 2, and so on. Calling funcB(in)->next = NULL makes node 1 point to Null, successfully reversing the order of the Linked List, with the last node, now node 1, pointing to NULL.



Question 3.

a)Θ(n^3). S ince we're talking about worst-case scenarios, if every element inside array A is 0, then we get every loop to run all its iterations. This means that the outermost loop will run from i to n-1 (0 to n-1), the second outermost will run from j to i (also 0 to n-1), and lastly the innermost lopp will run from k to j (also 0 to n-1). This means that the program will run Θ(n-1) * Θ(n-1) * Θ(n-1) =  Θ((n-1)³), which simplifies to Θ(n³)



b) Θ(nlogn). The i in the for loop gets multiplied by 2 every iteration, therefore running a total of logn times. The recursive function inside it runs i-1 times in every call, so the largest number of times it will run is n-1 times, when i = n. Therefore, the function runs in Θ(logn) * Θ(i-1) = Σi, the sigma going from i=1 to logn. The summation then equals (log(n)(log(n)-1))/2 which simplifies to Θ(log²(n))



c) Θ(n²logn). The first for loop that sets up all the pointers and values runs in n-1 times, which is Θ(n) runtime. The second loop is where things get interesting. The outermost for loop in this second part runs n times. The while loop inside it also runs n times since curr starts at the head. The if statement within the while loop triggers in a frequency of the floor of n/i. The for loop within the if statement runs n-1 times. Therefore, the runtime of the whole second loop is the summation of n²/i (simplified from (n-1)*(n/i)) from i = 0 to n. This equals to n² times the summation (1/i), which can be written assinc Θ(n²logn)



d) Θ(nlog²n). The innermost for loop runs i times, since size = i. The if statement that contains the innermost loop triggers logn base 3 (but base doesn't matter so just logn) times. Therefore, everything equals the summation from i = 0 to logn of i, which simplifies to Θ(log²n) times. Taking into consideration the outermost loop, we get n*log²n, therefore the program runs in Θ(nlog²n) time.

